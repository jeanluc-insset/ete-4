package fr.upjv.mis.ete.gel;


import fr.insset.jeanluc.util.factory.FactoryRegistry;
import fr.upjv.mis.GelLexer;
import fr.upjv.mis.GelParser;
import fr.upjv.mis.GelParser.GelExpressionContext;
import fr.upjv.mis.GelParserBaseVisitor;
import java.util.List;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CodePointCharStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;



/**
 * Creates an abstract tree from a gel expression.<br>
 * Uses the default Gel parser provided by antlr.
 *
 * @author jldeleage
 */
public class TreeBuilder extends GelParserBaseVisitor<GelExpression> {


    public TreeBuilder() {
        FactoryRegistry registry = FactoryRegistry.getRegistry();
#foreach ($aClass in $current.classes)
#if ($aClass.getValueOf("symbol"))
        registry.registerDefaultFactory("${aClass.getValueOf("symbol")}", Gel${aClass.name}Impl.class);
#end
#end
    }


    public GelExpression build(String inExpression, Object inContext) {
        GelLexer lexer = null;
        CodePointCharStream input = CharStreams.fromString(inExpression);
        lexer = new GelLexer(input);
        CommonTokenStream commonTokenStream = new CommonTokenStream(lexer);
        GelParser parser = new GelParser(commonTokenStream);
        GelParser.GelExpressionContext gelExpression = parser.gelExpression();
        return visitGelExpression(gelExpression);
    }

    @Override
    public GelExpression visitGelExpression(GelExpressionContext inContext) {
        List<ParseTree>     children = inContext.children;
        return visit(children.get(0));
    }

#foreach ($aClass in $current.classes)
#if ($aClass.getValueOf("symbol"))
    @Override
    public GelExpression visit${aClass.name}Expression(GelParser.${aClass.name}ExpressionContext ctx) {
        return null;
    }
#end
#end


}

